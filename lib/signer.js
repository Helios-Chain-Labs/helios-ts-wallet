var e=require("node-fetch"),t=require("@metamask/eth-sig-util"),n=require("@ethersproject/bytes"),r=require("@tharsis/proto"),s=require("@tharsis/transactions");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=/*#__PURE__*/o(e);const i={chainId:9e3,cosmosChainId:"evmos_9000-1"};exports.LOCALNET_CHAIN=i,exports.LOCALNET_FEE={amount:"20",denom:"aevmos",gas:"200000"},exports.MAINNET_CHAIN={chainId:9001,cosmosChainId:"evmos_9001-2"},exports.MAINNET_FEE={amount:"5000",denom:"aevmos",gas:"600000"},exports.TESTNET_CHAIN={chainId:9001,cosmosChainId:"evmos_9001-2"},exports.TESTNET_FEE={amount:"5000",denom:"atevmos",gas:"600000"},exports.broadcast=function(e,t="http://127.0.0.1:1317"){try{return Promise.resolve(a.default(`${t}/cosmos/tx/v1beta1/txs`,{method:"post",body:e,headers:{"Content-Type":"application/json"}})).then(function(e){return Promise.resolve(e.json())})}catch(e){return Promise.reject(e)}},exports.getSender=function(e,t="http://127.0.0.1:1317"){try{return Promise.resolve(a.default(`${t}/cosmos/auth/v1beta1/accounts/${e}`)).then(function(t){return Promise.resolve(t.json()).then(function(t){return{accountAddress:e,sequence:parseInt(t.account.base_account.sequence,10),accountNumber:parseInt(t.account.base_account.account_number,10),pubkey:t.account.base_account.pub_key.key}})})}catch(e){return Promise.reject(e)}},exports.signTransaction=function(e,t,s="BROADCAST_MODE_BLOCK"){try{const o=`0x${Buffer.from(t.signDirect.signBytes,"base64").toString("hex")}`,a=e._signingKey().signDigest(o),i=n.splitSignature(a),c=n.arrayify(n.concat([i.r,i.s])),u=`{ "tx_bytes": [${r.createTxRaw(t.signDirect.body.serializeBinary(),t.signDirect.authInfo.serializeBinary(),[c]).message.serializeBinary().toString()}], "mode": "${s}" }`;return Promise.resolve(u)}catch(e){return Promise.reject(e)}},exports.singTransactionUsingEIP712=function(e,r,o,a=i,c="BROADCAST_MODE_BLOCK"){try{const i=n.arrayify(t.TypedDataUtils.eip712Hash(o.eipToSign,t.SignTypedDataVersion.V4));return Promise.resolve(e._signingKey().signDigest(i)).then(function(e){const t=n.joinSignature(e),i=s.signatureToWeb3Extension(a,{accountAddress:r},t);return`{ "tx_bytes": [${s.createTxRawEIP712(o.legacyAmino.body,o.legacyAmino.authInfo,i).message.serializeBinary().toString()}], "mode": "${c}" }`})}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=signer.js.map
