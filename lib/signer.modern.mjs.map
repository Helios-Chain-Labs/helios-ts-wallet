{"version":3,"file":"signer.modern.mjs","sources":["../src/signer.ts"],"sourcesContent":["import fetch from 'node-fetch'\nimport { TypedDataUtils, SignTypedDataVersion } from '@metamask/eth-sig-util'\nimport { Wallet } from '@ethersproject/wallet'\nimport {\n  arrayify,\n  concat,\n  splitSignature,\n  joinSignature,\n} from '@ethersproject/bytes'\nimport { createTxRaw } from '@tharsis/proto'\nimport {\n  createTxRawEIP712,\n  signatureToWeb3Extension,\n  Sender,\n  TxGenerated,\n  createMessageSend,\n  Chain,\n} from '@tharsis/transactions'\n\n// Chain helpers\n\nexport const LOCALNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-1',\n}\n\nexport const LOCALNET_FEE = {\n  amount: '20',\n  denom: 'aevmos',\n  gas: '200000',\n}\n\nexport const MAINNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const MAINNET_FEE = {\n  amount: '5000',\n  denom: 'aevmos',\n  gas: '600000',\n}\n\nexport const TESTNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const TESTNET_FEE = {\n  amount: '5000',\n  denom: 'atevmos',\n  gas: '600000',\n}\n\n// Get Account\n/* eslint-disable camelcase */\ninterface AccountResponse {\n  account: {\n    '@type': string\n    base_account: {\n      address: string\n      pub_key: {\n        '@type': string\n        key: string\n      }\n      account_number: string\n      sequence: string\n    }\n    code_hash: string\n  }\n}\n\nexport async function getSender(\n  wallet: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const addrRequest = await fetch(\n    `${url}/cosmos/auth/v1beta1/accounts/${wallet}`,\n  )\n  const resp = (await addrRequest.json()) as AccountResponse\n\n  return {\n    accountAddress: wallet,\n    sequence: parseInt(resp.account.base_account.sequence as string, 10),\n    accountNumber: parseInt(resp.account.base_account.account_number, 10),\n    pubkey: resp.account.base_account.pub_key.key,\n  }\n}\n\n// Broadcast a transaction in json.stringify format\nexport async function broadcast(\n  transactionBody: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const post = await fetch(`${url}/cosmos/tx/v1beta1/txs`, {\n    method: 'post',\n    body: transactionBody,\n    headers: { 'Content-Type': 'application/json' },\n  })\n  const data = await post.json()\n  return data\n}\n\n// Sign transaction using payload method (keplr style)\nexport async function signTransaction(\n  wallet: Wallet,\n  tx: TxGenerated,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = `0x${Buffer.from(\n    tx.signDirect.signBytes,\n    'base64',\n  ).toString('hex')}`\n\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = wallet._signingKey().signDigest(dataToSign)\n  const splitedSignature = splitSignature(signatureRaw)\n  const signature = arrayify(concat([splitedSignature.r, splitedSignature.s]))\n\n  const signedTx = createTxRaw(\n    tx.signDirect.body.serializeBinary(),\n    tx.signDirect.authInfo.serializeBinary(),\n    [signature],\n  )\n  const body = `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n\n  return body\n}\n\n// Sign transaction using eip712 method (metamask style)\nexport async function singTransactionUsingEIP712(\n  wallet: Wallet,\n  sender: string,\n  tx: TxGenerated,\n  chain: Chain = LOCALNET_CHAIN,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = arrayify(\n    TypedDataUtils.eip712Hash(tx.eipToSign as any, SignTypedDataVersion.V4),\n  )\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = await wallet._signingKey().signDigest(dataToSign)\n  const signature = joinSignature(signatureRaw)\n\n  const extension = signatureToWeb3Extension(\n    chain,\n    { accountAddress: sender } as Sender,\n    signature,\n  )\n  const signedTx = createTxRawEIP712(\n    tx.legacyAmino.body,\n    tx.legacyAmino.authInfo,\n    extension,\n  )\n\n  return `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n}\n"],"names":["LOCALNET_CHAIN","chainId","cosmosChainId","LOCALNET_FEE","amount","denom","gas","MAINNET_CHAIN","MAINNET_FEE","TESTNET_CHAIN","TESTNET_FEE","async","getSender","wallet","url","addrRequest","fetch","resp","json","accountAddress","sequence","parseInt","account","base_account","accountNumber","account_number","pubkey","pub_key","key","transactionBody","post","method","body","headers","signTransaction","tx","broadcastMode","dataToSign","Buffer","from","signDirect","signBytes","toString","signatureRaw","_signingKey","signDigest","splitedSignature","splitSignature","signature","arrayify","concat","r","s","createTxRaw","serializeBinary","authInfo","message","singTransactionUsingEIP712","sender","chain","TypedDataUtils","eip712Hash","eipToSign","SignTypedDataVersion","V4","joinSignature","extension","signatureToWeb3Extension","createTxRawEIP712","legacyAmino"],"mappings":"oVAqBaA,MAAAA,EAAiB,CAC5BC,QAAS,IACTC,cAAe,gBAGJC,EAAe,CAC1BC,OAAQ,KACRC,MAAO,SACPC,IAAK,UAGmBC,EAAG,CAC3BN,QAAS,KACTC,cAAe,gBAGOM,EAAG,CACzBJ,OAAQ,OACRC,MAAO,SACPC,IAAK,UAGMG,EAAgB,CAC3BR,QAAS,KACTC,cAAe,gBAGJQ,EAAc,CACzBN,OAAQ,OACRC,MAAO,UACPC,IAAK,UAqBAK,eAAAC,EACLC,EACAC,EAAc,yBAEd,MAAiBC,QAASC,EACrB,GAAAF,kCAAoCD,KAE/BI,QAAUF,EAAYG,OAEhC,MAAO,CACLC,eAAgBN,EAChBO,SAAUC,SAASJ,EAAKK,QAAQC,aAAaH,SAAoB,IACjEI,cAAeH,SAASJ,EAAKK,QAAQC,aAAaE,eAAgB,IAClEC,OAAQT,EAAKK,QAAQC,aAAaI,QAAQC,KAKvCjB,iBACLkB,EACAf,EAAc,yBAEd,MAAMgB,QAAkBd,EAAI,GAAAF,0BAA6B,CACvDiB,OAAQ,OACRC,KAAMH,EACNI,QAAS,CAAE,eAAgB,sBAG7B,aADmBH,EAAKZ,OAKJgB,eAAAA,EACpBrB,EACAsB,EACAC,EAAwB,wBAExB,MAAgBC,EAAQ,KAAAC,OAAOC,KAC7BJ,EAAGK,WAAWC,UACd,UACAC,SAAS,SAGOC,EAAG9B,EAAO+B,cAAcC,WAAWR,GAC/CS,EAAmBC,EAAeJ,GAClCK,EAAYC,EAASC,EAAO,CAACJ,EAAiBK,EAAGL,EAAiBM,KAWxE,MAJ+B,kBALdC,EACflB,EAAGK,WAAWR,KAAKsB,kBACnBnB,EAAGK,WAAWe,SAASD,kBACvB,CAACN,IAEqCQ,QACrCF,kBACAZ,yBAAyBN,OAMvBzB,eAAA8C,EACL5C,EACA6C,EACAvB,EACAwB,EAAe3D,EACfoC,EAAwB,wBAExB,MAAMC,EAAaY,EACjBW,EAAeC,WAAW1B,EAAG2B,UAAkBC,EAAqBC,KAGpDrB,QAAS9B,EAAO+B,cAAcC,WAAWR,GAC5CW,EAAGiB,EAActB,GAEjBuB,EAAGC,EAChBR,EACA,CAAExC,eAAgBuC,GAClBV,GAQF,MAAO,kBANUoB,EACfjC,EAAGkC,YAAYrC,KACfG,EAAGkC,YAAYd,SACfW,GAGgCV,QAC/BF,kBACAZ,yBAAyBN"}