import t from"node-fetch";import{TypedDataUtils as n,SignTypedDataVersion as s}from"@metamask/eth-sig-util";import{splitSignature as e,arrayify as o,concat as a,joinSignature as i}from"@ethersproject/bytes";import{createTxRaw as c}from"@tharsis/proto";import{signatureToWeb3Extension as r,createTxRawEIP712 as m}from"@tharsis/transactions";const u={chainId:9e3,cosmosChainId:"evmos_9000-1"},g={amount:"20",denom:"aevmos",gas:"200000"},y={chainId:9001,cosmosChainId:"evmos_9001-2"},d={amount:"5000",denom:"aevmos",gas:"600000"},h={chainId:9001,cosmosChainId:"evmos_9001-2"},p={amount:"5000",denom:"atevmos",gas:"600000"};async function b(n,s="http://127.0.0.1:1317"){const e=await t(`${s}/cosmos/auth/v1beta1/accounts/${n}`),o=await e.json();return{accountAddress:n,sequence:parseInt(o.account.base_account.sequence,10),accountNumber:parseInt(o.account.base_account.account_number,10),pubkey:o.account.base_account.pub_key.key}}async function _(n,s="http://127.0.0.1:1317"){const e=await t(`${s}/cosmos/tx/v1beta1/txs`,{method:"post",body:n,headers:{"Content-Type":"application/json"}});return await e.json()}async function f(t,n,s="BROADCAST_MODE_BLOCK"){const i=`0x${Buffer.from(n.signDirect.signBytes,"base64").toString("hex")}`,r=t._signingKey().signDigest(i),m=e(r),u=o(a([m.r,m.s]));return`{ "tx_bytes": [${c(n.signDirect.body.serializeBinary(),n.signDirect.authInfo.serializeBinary(),[u]).message.serializeBinary().toString()}], "mode": "${s}" }`}async function B(t,e,a,c=u,g="BROADCAST_MODE_BLOCK"){const y=o(n.eip712Hash(a.eipToSign,s.V4)),d=await t._signingKey().signDigest(y),h=i(d),p=r(c,{accountAddress:e},h);return`{ "tx_bytes": [${m(a.legacyAmino.body,a.legacyAmino.authInfo,p).message.serializeBinary().toString()}], "mode": "${g}" }`}export{u as LOCALNET_CHAIN,g as LOCALNET_FEE,y as MAINNET_CHAIN,d as MAINNET_FEE,h as TESTNET_CHAIN,p as TESTNET_FEE,_ as broadcast,b as getSender,f as signTransaction,B as singTransactionUsingEIP712};
//# sourceMappingURL=signer.modern.mjs.map
