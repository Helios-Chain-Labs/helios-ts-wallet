{"version":3,"file":"signer.module.js","sources":["../src/signer.ts"],"sourcesContent":["import fetch from 'node-fetch'\nimport { TypedDataUtils, SignTypedDataVersion } from '@metamask/eth-sig-util'\nimport { Wallet } from '@ethersproject/wallet'\nimport {\n  arrayify,\n  concat,\n  splitSignature,\n  joinSignature,\n} from '@ethersproject/bytes'\nimport { createTxRaw } from '@tharsis/proto'\nimport {\n  createTxRawEIP712,\n  signatureToWeb3Extension,\n  Sender,\n  TxGenerated,\n  createMessageSend,\n  Chain,\n} from '@tharsis/transactions'\n\n// Chain helpers\n\nexport const LOCALNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-1',\n}\n\nexport const LOCALNET_FEE = {\n  amount: '20',\n  denom: 'aevmos',\n  gas: '200000',\n}\n\nexport const MAINNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const MAINNET_FEE = {\n  amount: '5000',\n  denom: 'aevmos',\n  gas: '600000',\n}\n\nexport const TESTNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const TESTNET_FEE = {\n  amount: '5000',\n  denom: 'atevmos',\n  gas: '600000',\n}\n\n// Get Account\n/* eslint-disable camelcase */\ninterface AccountResponse {\n  account: {\n    '@type': string\n    base_account: {\n      address: string\n      pub_key: {\n        '@type': string\n        key: string\n      }\n      account_number: string\n      sequence: string\n    }\n    code_hash: string\n  }\n}\n\nexport async function getSender(\n  wallet: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const addrRequest = await fetch(\n    `${url}/cosmos/auth/v1beta1/accounts/${wallet}`,\n  )\n  const resp = (await addrRequest.json()) as AccountResponse\n\n  return {\n    accountAddress: wallet,\n    sequence: parseInt(resp.account.base_account.sequence as string, 10),\n    accountNumber: parseInt(resp.account.base_account.account_number, 10),\n    pubkey: resp.account.base_account.pub_key.key,\n  }\n}\n\n// Broadcast a transaction in json.stringify format\nexport async function broadcast(\n  transactionBody: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const post = await fetch(`${url}/cosmos/tx/v1beta1/txs`, {\n    method: 'post',\n    body: transactionBody,\n    headers: { 'Content-Type': 'application/json' },\n  })\n  const data = await post.json()\n  return data\n}\n\n// Sign transaction using payload method (keplr style)\nexport async function signTransaction(\n  wallet: Wallet,\n  tx: TxGenerated,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = `0x${Buffer.from(\n    tx.signDirect.signBytes,\n    'base64',\n  ).toString('hex')}`\n\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = wallet._signingKey().signDigest(dataToSign)\n  const splitedSignature = splitSignature(signatureRaw)\n  const signature = arrayify(concat([splitedSignature.r, splitedSignature.s]))\n\n  const signedTx = createTxRaw(\n    tx.signDirect.body.serializeBinary(),\n    tx.signDirect.authInfo.serializeBinary(),\n    [signature],\n  )\n  const body = `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n\n  return body\n}\n\n// Sign transaction using eip712 method (metamask style)\nexport async function singTransactionUsingEIP712(\n  wallet: Wallet,\n  sender: string,\n  tx: TxGenerated,\n  chain: Chain = LOCALNET_CHAIN,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = arrayify(\n    TypedDataUtils.eip712Hash(tx.eipToSign as any, SignTypedDataVersion.V4),\n  )\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = await wallet._signingKey().signDigest(dataToSign)\n  const signature = joinSignature(signatureRaw)\n\n  const extension = signatureToWeb3Extension(\n    chain,\n    { accountAddress: sender } as Sender,\n    signature,\n  )\n  const signedTx = createTxRawEIP712(\n    tx.legacyAmino.body,\n    tx.legacyAmino.authInfo,\n    extension,\n  )\n\n  return `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n}\n"],"names":["singTransactionUsingEIP712","wallet","sender","tx","chain","LOCALNET_CHAIN","broadcastMode","dataToSign","arrayify","TypedDataUtils","eip712Hash","eipToSign","SignTypedDataVersion","V4","_signingKey","signDigest","signatureRaw","signature","joinSignature","extension","signatureToWeb3Extension","accountAddress","createTxRawEIP712","legacyAmino","body","authInfo","message","serializeBinary","toString","e","Promise","reject","signTransaction","Buffer","from","signDirect","signBytes","splitedSignature","splitSignature","concat","r","s","createTxRaw","broadcast","transactionBody","url","resolve","fetch","method","headers","post","json","getSender","addrRequest","resp","sequence","parseInt","account","base_account","accountNumber","account_number","pubkey","pub_key","key","chainId","cosmosChainId","LOCALNET_FEE","amount","denom","gas","MAINNET_CHAIN","MAINNET_FEE","TESTNET_CHAIN","TESTNET_FEE"],"mappings":"oVAoIsBA,MAAtBA,EAAA,SACEC,EACAC,EACAC,EACAC,EAAeC,EACfC,EAAwB,wBAAsB,IAE9C,MAAMC,EAAaC,EACjBC,EAAeC,WAAWP,EAAGQ,UAAkBC,EAAqBC,KAHxB,OAMnBZ,QAAAA,QAAAA,EAAOa,cAAcC,WAAWR,IAArDS,KAAAA,SAAAA,GACN,MAAeC,EAAGC,EAAcF,GAE1BG,EAAYC,EAChBhB,EACA,CAAEiB,eAAgBnB,GAClBe,GAQF,MAAO,kBANUK,EACfnB,EAAGoB,YAAYC,KACfrB,EAAGoB,YAAYE,SACfN,GAGgCO,QAC/BC,kBACAC,yBAAyBtB,SA3B9B,MAAAuB,GAAA,OAAAC,QAAAC,OAAAF,KA5BsBG,EACpB/B,SAAAA,EACAE,EACAG,EAAwB,wBAH1B,IAKE,MAAgBC,EAAQ,KAAA0B,OAAOC,KAC7B/B,EAAGgC,WAAWC,UACd,UACAR,SAAS,SAGLZ,EAAef,EAAOa,cAAcC,WAAWR,GAC/B8B,EAAGC,EAAetB,GAClCC,EAAYT,EAAS+B,EAAO,CAACF,EAAiBG,EAAGH,EAAiBI,KAO9DjB,EAAqB,kBALdkB,EACfvC,EAAGgC,WAAWX,KAAKG,kBACnBxB,EAAGgC,WAAWV,SAASE,kBACvB,CAACV,IAEqCS,QACrCC,kBACAC,yBAAyBtB,OAE5B,OAAOkB,QAAAA,QAAAA,GAxBT,MAdAK,GAAA,OAAAC,QAAAC,OAAAF,KAAAc,EAAA,SACEC,EACAC,EAAc,yBAAuB,IAAA,OAAAf,QAAAgB,QAElBC,EAAS,GAAAF,0BAA6B,CACvDG,OAAQ,OACRxB,KAAMoB,EACNK,QAAS,CAAE,eAAgB,uBAHvBC,KAAAA,SAAAA,0BAKaA,EAAKC,UAT1B,MAlBAtB,GAAA,OAAAC,QAAAC,OAAAF,KAAAuB,EAAA,SACEnD,EACA4C,EAAc,yBAAuB,IAAA,OAAAf,QAAAgB,QAEXC,EACrB,GAAAF,kCAAoC5C,MADnCoD,KAAAA,SAAAA,GAGcA,OAAAA,QAAAA,QAAAA,EAAYF,QAA1BG,KAAAA,SAAAA,GAEN,MAAO,CACLjC,eAAgBpB,EAChBsD,SAAUC,SAASF,EAAKG,QAAQC,aAAaH,SAAoB,IACjEI,cAAeH,SAASF,EAAKG,QAAQC,aAAaE,eAAgB,IAClEC,OAAQP,EAAKG,QAAQC,aAAaI,QAAQC,SAb9C,MAAAlC,GAAA,OAAAC,QAAAC,OAAAF,KAnD2BxB,EAAG,CAC5B2D,QAAS,IACTC,cAAe,gBAGJC,EAAe,CAC1BC,OAAQ,KACRC,MAAO,SACPC,IAAK,UAGMC,EAAgB,CAC3BN,QAAS,KACTC,cAAe,gBAGOM,EAAG,CACzBJ,OAAQ,OACRC,MAAO,SACPC,IAAK,UAGmBG,EAAG,CAC3BR,QAAS,KACTC,cAAe,gBAGOQ,EAAG,CACzBN,OAAQ,OACRC,MAAO,UACPC,IAAK"}